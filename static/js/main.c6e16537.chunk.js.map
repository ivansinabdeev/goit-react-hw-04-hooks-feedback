{"version":3,"sources":["components/Feedback/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notifications/Notifications.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js","components/Feedback/Feedback.module.css"],"names":["FeedbackOptions","types","onLeaveFeedback","map","option","type","className","s","button","onClick","Statistics","good","bad","neutral","total","positivePercentage","stat","comment","Notification","message","Section","title","children","defaultProps","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","innerHTML","Math","floor","Notifications","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAuBeA,EAlBS,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAChC,OAAOD,EAAME,KAAI,SAACC,GAAD,OACf,wBAEEC,KAAK,SACLC,UAAWC,IAAEC,OACbC,QAASP,EAJX,SAMGE,GALIA,OCiBIM,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKT,UAAWC,IAAES,KAAlB,UACE,oBAAGV,UAAWC,IAAEU,QAAhB,mBAAgCN,KAChC,oBAAGL,UAAWC,IAAEU,QAAhB,sBAAmCJ,KACnC,oBAAGP,UAAWC,IAAEU,QAAhB,kBAA+BL,KAC/B,oBAAGN,UAAWC,IAAEU,QAAhB,oBAAiCH,KACjC,oBAAGR,UAAWC,IAAEU,QAAhB,gCAA6CF,EAA7C,WCNSG,MAHf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCDPC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MAIPF,EAAQG,aAAe,CAAEF,MAAO,IAEjBD,QCPA,SAASI,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOd,EAAP,KAAae,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOb,EAAP,KAAYgB,EAAZ,KAcA,SAASC,IACP,OAAOhB,EAAUD,EAAMD,EAQzB,OACE,gCACE,cAAC,EAAD,CAASU,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBpB,MALP,CAAC,OAAQ,UAAW,OAKGC,gBAxBf,SAAC4B,GACI,SAAvBA,EAAEC,OAAOC,WACXN,GAAQ,SAACf,GAAD,OAAUA,EAAO,KAEA,YAAvBmB,EAAEC,OAAOC,WACXL,GAAW,SAACd,GAAD,OAAaA,EAAU,KAET,QAAvBiB,EAAEC,OAAOC,WACXJ,GAAO,SAAChB,GAAD,OAASA,EAAM,UAkBtB,cAAC,EAAD,CAASS,MAAM,aAAf,SACGQ,IAAuB,EACtB,cAAC,EAAD,CACElB,KAAMA,EACNE,QAASA,EACTD,IAAKA,EACLE,MAAOe,IACPd,mBAjBDkB,KAAKC,MAAOvB,EAAOkB,IAAwB,OAoB5C,cAACM,EAAD,CAAehB,QAAQ,2BC/CjC,IAYeiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvB,EAAD,MAEFwB,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,OAAS,4B","file":"static/js/main.c6e16537.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport s from \"./Feedback.module.css\";\n\nconst FeedbackOptions = ({ types, onLeaveFeedback }) => {\n  return types.map((option) => (\n    <button\n      key={option}\n      type=\"button\"\n      className={s.button}\n      onClick={onLeaveFeedback}\n    >\n      {option}\n    </button>\n  ));\n};\n\nFeedbackOptions.propTypes = {\n  types: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport s from \"../Feedback/Feedback.module.css\";\n\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\n  return (\n    <div className={s.stat}>\n      <p className={s.comment}>Good: {good}</p>\n      <p className={s.comment}>Neutral: {neutral}</p>\n      <p className={s.comment}>Bad: {bad}</p>\n      <p className={s.comment}>Total: {total}</p>\n      <p className={s.comment}>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\nexport default Notification;\n// Notification.defaultProps = {\n//   message: \"No message value\",\n// };\nNotification.propTypes = { message: PropTypes.string };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nSection.defaultProps = { title: \"\" };\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n","import { useState } from \"react\";\nimport FeedbackOptions from \"./components/Feedback/FeedbackOptions\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notifications from \"./components/Notifications/Notifications\";\nimport Section from \"./components/Section/Section\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = (e) => {\n    if (e.target.innerHTML === \"Good\") {\n      setGood((good) => good + 1);\n    }\n    if (e.target.innerHTML === \"Neutral\") {\n      setNeutral((neutral) => neutral + 1);\n    }\n    if (e.target.innerHTML === \"Bad\") {\n      setBad((bad) => bad + 1);\n    }\n  };\n\n  function countTotalFeedback() {\n    return neutral + bad + good;\n  }\n  function positivePercentage() {\n    return Math.floor((good / countTotalFeedback()) * 100);\n  }\n\n  const options = [\"Good\", \"Neutral\", \"Bad\"];\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions types={options} onLeaveFeedback={onLeaveFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback() > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={positivePercentage()}\n          />\n        ) : (\n          <Notifications message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stat\":\"Feedback_stat__2X63_\",\"comment\":\"Feedback_comment__1FMJ2\",\"button\":\"Feedback_button__2hG3h\"};"],"sourceRoot":""}